# Based on https://github.com/linkarzu/dotfiles-latest/blob/main/kitty/kitty.conf
# Andanced from https://github.com/nicknisi/dotfiles/blob/main/config/kitty/kitty.conf

# First, let's enable remote control in kitty to be able to reload the configuration w/o restarting Kitty.
allow_remote_control yes

# Kitty theme: Catppuccin-Mocha
# Add the theme at the top, any setting below the theme will be overriden
include themes/mocha.conf

#: Font size (in pts).
font_size 11.0

#:     $ kitty +list-fonts --psnames | grep Fira
#:     Fira Code
#:     Fira Code Bold (FiraCode-Bold)
#:     Fira Code Light (FiraCode-Light)
#:     Fira Code Medium (FiraCode-Medium)
#:     Fira Code Regular (FiraCode-Regular)
#:     Fira Code Retina (FiraCode-Retina)
font_family Fira Code Retina (FiraCode-Retina)
bold_font        auto
italic_font      auto
bold_italic_font auto
adjust_line_height 4

cursor #ffffff
cursor_text_color #000000

scrollback_lines 10000 

window_padding_width 3.0
# macos_titlebar_color background
macos_show_window_title_in all
macos_thicken_font 0.15
draw_minimal_borders yes
window_margin_width 0
window_padding_width 5
# set window opacity. Adjust this for readability, if needed.
background_opacity 0.90
# hide_window_decorations titlebar-only
# tab_bar_margin_height 10

tab_bar_edge top 

#: The edge to show the tab bar on, top or bottom.

tab_bar_style powerline 

#: The tab bar style, can be one of:

#: fade
#:     Each tab's edges fade into the background color. (See also tab_fade)
#: slant
#:     Tabs look like the tabs in a physical file.
#: separator
#:     Tabs are separated by a configurable separator. (See also
#:     tab_separator)
#: powerline
#:     Tabs are shown as a continuous line with "fancy" separators.
#:     (See also tab_powerline_style)
#: custom
#:     A user-supplied Python function called draw_tab is loaded from the file
#:     tab_bar.py in the kitty config directory. For examples of how to
#:     write such a function, see the functions named draw_tab_with_* in
#:     kitty's source code: kitty/tab_bar.py. See also
#:     this discussion <https://github.com/kovidgoyal/kitty/discussions/4447>
#:     for examples from kitty users.
#: hidden
#:     The tab bar is hidden. If you use this, you might want to create
#:     a mapping for the select_tab action which presents you with a list of
#:     tabs and allows for easy switching to a tab.

tab_bar_min_tabs 1

#: The minimum number of tabs that must exist before the tab bar is
#: shown.

tab_powerline_style slanted 

#: The powerline separator style between tabs in the tab bar when
#: using powerline as the tab_bar_style, can be one of: angled,
#: slanted, round.

tab_separator " â”‡"

#: The separator between tabs in the tab bar when using separator as
#: the tab_bar_style.

tab_title_template "{title}{' :{}:'.format(num_windows) if num_windows > 1 else ''}"

#: A template to render the tab title. The default just renders the
#: title with optional symbols for bell and activity. If you wish to
#: include the tab-index as well, use something like: {index}:{title}.
#: Useful if you have shortcuts mapped for goto_tab N. If you prefer
#: to see the index as a superscript, use {sup.index}. All data
#: available is:

#: title
#:     The current tab title.
#: index
#:     The tab index usable with goto_tab N goto_tab shortcuts.
#: layout_name
#:     The current layout name.
#: num_windows
#:     The number of windows in the tab.
#: num_window_groups
#:     The number of window groups (a window group is a window and all of its overlay windows) in the tab.
#: tab.active_wd
#:     The working directory of the currently active window in the tab
#:     (expensive, requires syscall). Use active_oldest_wd to get
#:     the directory of the oldest foreground process rather than the newest.
#: tab.active_exe
#:     The name of the executable running in the foreground of the currently
#:     active window in the tab (expensive, requires syscall). Use
#:     active_oldest_exe for the oldest foreground process.
#: max_title_length
#:     The maximum title length available.
#: keyboard_mode
#:     The name of the current keyboard mode <https://sw.kovidgoyal.net/kitty/mapping/#modal-mappings> or the empty string if no keyboard mode is active.

#: Note that formatting is done by Python's string formatting
#: machinery, so you can use, for instance, {layout_name[:2].upper()}
#: to show only the first two letters of the layout name, upper-cased.
#: If you want to style the text, you can use styling directives, for
#: example:
#: `{fmt.fg.red}red{fmt.fg.tab}normal{fmt.bg._00FF00}greenbg{fmt.bg.tab}`.
#: Similarly, for bold and italic:
#: `{fmt.bold}bold{fmt.nobold}normal{fmt.italic}italic{fmt.noitalic}`.
#: Note that for backward compatibility, if {bell_symbol} or
#: {activity_symbol} are not present in the template, they are
#: prepended to it.

# editor /opt/homebrew/bin/nvim
